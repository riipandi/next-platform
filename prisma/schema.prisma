// Learn more about Prisma: https://pris.ly/d/prisma-schema
datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id            String    @id @default(uuid())
  name          String?
  // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
  username      String?
  gh_username   String?
  email         String?   @unique
  emailVerified DateTime? @map("verified_at")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  sites         Site[]

  @@map("users")
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id            String   @id @default(uuid())
  title         String?  @db.Text
  description   String?  @db.Text
  content       String?  @db.LongText
  slug          String   @default(uuid())
  image         String?  @db.Text
  imageBlurhash String?  @map("image_blurhash") @db.LongText
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  published     Boolean  @default(false)
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?  @map("site_id")

  @@unique([id, siteId], name: "post_site_constraint")
  @@map("posts")
}

model Site {
  id            String   @id @default(uuid())
  name          String?
  description   String?  @db.Text
  logo          String?
  image         String?  @db.Text
  imageBlurhash String?  @map("image_blurhash") @db.LongText
  subdomain     String?  @unique
  customDomain  String?  @unique @map("custom_domain")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @map("user_id")
  posts         Post[]

  @@map("sites")
}

model Example {
  id            Int     @id @default(autoincrement())
  name          String?
  description   String? @db.Text
  domainCount   Int?    @map("domain_count")
  url           String?
  image         String? @db.Text
  imageBlurhash String? @map("image_blurhash") @db.LongText

  @@map("examples")
}
